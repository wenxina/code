<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <properties resource="application.yml"/>
    <!--mysql-->
    <!--<classPathEntry location="H:\repository\mysql\mysql-connector-java\8.0.13\mysql-connector-java-8.0.13.jar" />-->
    <!--oracle-->
    <classPathEntry location="C:\Users\INCON-1\Desktop\code\src\main\webapp\WEB-INF\lib\ojdbc6.jar"/>
    <context id="Tables" targetRuntime="MyBatis3">

        <!-- 自动识别数据库关键字，默认 false，如果设置为 true，根据 SqlReservedWords 中定义的关键字列表；
        	 一般保留默认值，遇到数据库关键字（Java 关键字），使用 columnOverride 覆盖
	      -->
        <property name="autoDelimitKeywords" value="false"/>
        <!-- 生成的 Java 文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化 java 代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化 XML 代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <!-- beginningDelimiter 和 endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如 ORACLE 就是双引号，MYSQL 默认是 ` 反引号； -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <!-- 生成的 pojo，将 implements Serializable -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"></plugin>

        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!--<jdbcConnection
                driverClass="com.mysql.cj.jdbc.Driver"
                connectionURL="jdbc:mysql://localhost:3306/test"
                userId="root"
                password="123456">
        </jdbcConnection>-->

        <jdbcConnection
                driverClass="oracle.jdbc.driver.OracleDriver"
                connectionURL="jdbc:oracle:thin:@192.168.1.247:1521:JXYTH"
                userId="xmsb"
                password="xmsb">
        </jdbcConnection>

        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <javaModelGenerator targetPackage="com.incon.common.crm.entity" targetProject="D:/Demo/src/main/java/">
            <property name="enableSubPackages" value="true"/>
            <!--  for MyBatis3/MyBatis3Simple
            自动为每一个生成的类创建一个构造方法，构造方法包含了所有的 field；而不是使用 setter；
             -->
            <property name="constructorBased" value="true"/>
            <!-- 从数据库返回的值被清理前后的空格 -->
            <property name="trimStrings" value="false"/>
        </javaModelGenerator>

        <sqlMapGenerator targetPackage="mapper.mapper" targetProject="D:/Demo/src/main/resources/">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <javaClientGenerator targetPackage="com.incon.common.crm.mapper" targetProject="D:/Demo/src/main/java/"
                             type="XMLMAPPER">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <!-- 选择一个 table 来生成相关文件，可以有一个或多个 table，必须要有 table 元素
        选择的 table 会生成以下文件：
        1，SQL mapper 文件
        2，生成一个主键类；
        3，除了 BLOB 和主键的其他字段的类；
        4，包含 BLOB 的类；
        5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；
        6，Mapper 接口（可选）
        tableName（必要）：要生成对象的表名；
        注意：大小写敏感问题。正常情况下，MBG 会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG 会
            根据设置的 schema，catalog 或 tablename 去查询数据表，按照下面的流程：
            1，如果 schema，catalog 或 tablename 中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
            2，否则，如果数据库的标识符使用大写的，那么 MBG 自动把表名变成大写再查找；
            3，否则，如果数据库的标识符使用小写的，那么 MBG 自动把表名变成小写再查找；
            4，否则，使用指定的大小写格式查询；
        另外的，如果在创建表的时候，使用的 "" 把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；
        这个时候，请设置 delimitIdentifiers="true" 即可保留大小写格式；
        可选：
        1，schema：数据库的 schema；
        2，catalog：数据库的 catalog；
        3，alias：为数据表设置的别名，如果设置了 alias，那么生成的所有的 SELECT SQL 语句中，列名会变成：alias_actualColumnName
        4，domainObjectName：生成的 domain 类的名字，如果不设置，直接使用表名作为 domain 类的名字；可以设置为 somepck.domainName，那么会自动把 domainName 类再放到 somepck 包里面；
        5，enableInsert（默认 true）：指定是否生成 insert 语句；
        6，enableSelectByPrimaryKey（默认 true）：指定是否生成按照主键查询对象的语句（就是 getById 或 get）；
        7，enableSelectByExample（默认 true）：MyBatis3Simple 为 false，指定是否生成动态查询语句；
        8，enableUpdateByPrimaryKey（默认 true）：指定是否生成按照主键修改对象的语句（即 update)；
        9，enableDeleteByPrimaryKey（默认 true）：指定是否生成按照主键删除对象的语句（即 delete）；
        10，enableDeleteByExample（默认 true）：MyBatis3Simple 为 false，指定是否生成动态删除语句；
        11，enableCountByExample（默认 true）：MyBatis3Simple 为 false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
        12，enableUpdateByExample（默认 true）：MyBatis3Simple 为 false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
        13，modelType：参考 context 元素的 defaultModelType，相当于覆盖；
        14，delimitIdentifiers：参考 tableName 的解释，注意，默认的 delimitIdentifiers 是双引号，如果类似 MYSQL 这样的数据库，使用的是 `（反引号，那么还需要设置 context 的 beginningDelimiter 和 endingDelimiter 属性）
        15，delimitAllColumns：设置是否所有生成的 SQL 中的列名都使用标识符引起来。默认为 false，delimitIdentifiers 参考 context 的属性
        注意，table 里面很多参数都是对 javaModelGenerator，context 等元素的默认属性的一个复写；
    	 -->
        <!-- 列出要生成代码的所有表，这里配置的是不生成 Example 文件 -->
        <table schema="XMSB" tableName="%"
               enableCountByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               enableUpdateByExample="false" selectByExampleQueryId="false">
        </table>

    </context>
</generatorConfiguration>